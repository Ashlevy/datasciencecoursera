install.packages("KernSmooth")
pwd
pdw
cd cholafolyfe
library(KernSmooth)
mkdir "datasciencecoursera"
mkdir ~/"datasciencecoursera"
getwd()
myfunction <- function ()
{ x <- rnorm(100)
mean(x)
}
ls
ls
myfunction <- function ()
{ x <- rnorm(100)
mean(x)
}
ls
library(readxl)
hw1_data <- read_excel("C:/Users/Ashley/Downloads/quiz1_data/hw1_data.csv")
View(hw1_data)
library(readxl)
DataScience <- read_excel("C:/Users/Ashley/Desktop/DataScience.xlsx")
View(DataScience)
print DataScience[1:2, ]
DataScience[1:2, ]
library(DataScience)
nrow(DataScience)
DataScience[152:153, ]
DataScience[47, Ozone]
DataScience[47, 1]
nrow(DataScience[,1]=NA)
nrow(DataScience[,1]=="NA")
nrow(DataScience=="NA"[,1])
as.data.fram(table(DataScience))
as.data.frame(table(DataScience))
..
exit
end
c
q
z
length(which(DataScience==NA))
mean(DataScience[,1])
mean(Ozone, na.rm=TRUE)
mean(DataScience[,1], na.rm=TRUE)
colMeans(DataScience, na.rm = FALSE, dims = 1)
colMeans(1, na.rm = FALSE, dims = 1)
colMeans(1:2, na.rm = FALSE, dims = 1)
colMeans(1, na.rm = FALSE, dims = 2)
mean(DataScience[,"Ozone"])
mean(DataScience$Ozone, na.rm=FALSE)
mean(DataScience$Ozone, na.rm=TRUE)
if("Ozone">31 & "Temp">90) {
mean(DataScience[,2])
}
a<- "Ozone">31
a<- "Temp">90
b<- "Ozone">31
sum(Solar.R, if a=TRUE & b=TRUE)
if a=TRUE & b=TRUE, sum(Solar.R)
a=TRUE & b=TRUE, sum(Solar.R)
a=TRUE & b=TRUE sum(Solar.R)
a=TRUE$b=TRUE, sum(Solar.R)
Ozone <-na.omit(DataScience$Ozone)
as.numeric(Ozone)
mean(Ozone_clean)
mean(Ozone)
Ozone<-DataScience[,1]
ozone_clean <-Ozone[!is.na(Ozone)]
data.sub0 <- DataScience[DataScience$Ozone > 31, , drop = FALSE]
data.subT0 <- data.sub0[data.sub0$Temp > 90, , drop = FALSE]
data.subT00 <- na.omit(data.subT0)
mean(data.subT00$Solar.R)
mean.default(data.subT00$Solar.R)
a <- "Month"=6
a <- "Month"==6
mean("Temp")
mean(DataScience[,4])
x <- 4L
class(x)
class help
help class
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3,5)
y <- c(3,2,10)
cbind(x,y)
x <- 1:4
y <- 2:3
x+y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x < 10] <- 4
x
x[x > 4] <- 10
x
x[x >= 10] <- 4
x
x[x > 10] <- 4
x
x[x >= 11] <- 4
x
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x >= 11] <- 4
x
x[x > 10] == 4
x
x[x == 10] <- 4
x
library(readxl)
DataScience <- read_excel("C:/Users/Ashley/Desktop/DataScience.xlsx")
View(DataScience)
DataScience(2,)
DataScience[1:2,]
DataScience[nrows]
help
nrow(DataScience)
tail(DataScience)
DataScience(152:153,)
DataScience(152:153, )
DataScience[152:153, ]
DataScience[47,1]
x <- DataScience[ ,1]
bad <- is.na(x)
x[!bad]
x
x[!bad]
count(bad)
nrow(bad0
)
nrow(bad)
sum(is.na(df$col))
sum(is.na(df$"Ozone"))
sum(is.na(df$1))
x <- (4, TRUE)
x <- c(4, TRUE)
x
class(x)
x <- c(1,3,5)
y <- c(3,2,10)
cbind(x,y)
x <- 1:4
y <- 2
x+y
x <- 4
class(x)
x <- c(4, "a", TRUE)
class(s)
class(x)
x <- c(1,3,5)
y <- c(3,2,10)
cbind(x,y)
install.packages("swirl")
library(swirl)
swirl()
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints < 0)
all(ints > 0)
swirl()
Sys.Data()
Sys.Date()
mean(c(2,4,5))
submit()
submit()
boring_function('My first function!')
boring_function
submit()
submit()
submit()
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div=2)
args(remainder)
submit()
submit()
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(func, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x)[1], c(8,4,0))
evaluate(function(x){[1]}, c(8,4,0))
evaluate(function(x){x}, c(8,4,0))
evaluate(function(x){"a"}, c(8,4,0))
evaluate(function(x){c(x)}, c(8,4,0))
evaluate(function(x){c([1])}, c(8,4,0))
evaluate(function(x){c(1, )}, c(8,4,0))
evaluate(function(x){c(x, FALSE, FALSE)}, c(8,4,0))
info()
evaluate(function(x){dat==1}, c(8,4,0))
evaluate(function(x){x=1}, c(8,4,0))
evaluate(function(x){which(x==1)}, c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
length(c(8,4,0))
evaluate(function(x){x[2]}, c(8,4,0))
?paste
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
submit()
submit()
telegram("Hi", "there.")
submit()
mad_libs(Tahiti, bold, food)
mad_libs("Tahiti", "bold", "food")
submit()
submit()
submit()
submit()
submit()
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
print d1
print(d1)
paste(d1)
print(d1)
d1
ds <- as.Date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- strptime("Octover 17, 1986 08:24")
t3 <- "Octover 17, 1986 08:24"
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
cube <- function(x,n) {
x^3
}
cube(3)
x<- 1:10
if(x>5){
x<-0
}
f <- function(x){
g <- function(y) {
y+z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x<3){}
y <- if(x<3){
NA}
else{10}
x<-5
y<- if(x<3){
NA
}else{
10
}
y
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
clas_list <- lapply(flags, class)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[ ,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes)
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
apply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2]
)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate)
tapply(flags$animate, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
lapply(iris, 1, 'virginica', mean)
vapply(iris, 1, 'virginica', mean)
tapply(iris, c[1, 'virginica'], mean)
tapply(iris$Sepal.Length, iris$Species, mean)
colMeans(iris)
rowMeans(iris[,1:4])
apply(iris, 2, mean)
apply(iris,1,mean)
apply(iris[,1:4],2,mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
?mtcars
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
debug(ls)
ls
end
end
q
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars[,2], 4, mean)
apply(mtcars[,4], mean)
mean(mtcars[mtcars$cyl == '8',]$hp) - mean(mtcars[mtcards$cyl == '4',]$hp)
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcards$cyl == "4",]$hp)
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
getwd()
setwd(C:/Users/Ashley/datasciencecoursera)
setwd(/Users/Ashley/datasciencecoursera)
setwd("C:/Users/Ashley/datasciencecoursera")
git config --global user.name "Ashlevy"
git config --global user.name "Ashlevy"
git config --global user.email ash.levy@live.com
git config --global user.name "Ashlevy"
git config --local --list
?git
git config --global user.name "Ashlevy"
